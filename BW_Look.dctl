//FORMULAS PARA LOG-LINEAR-LOG
// Log3G10
__DEVICE__ float log3g10_lin(float in)
{
float out;
float a =  0.224282f;
float b =  155.975327f;
float c =  0.01f;
float g =  15.1927f;
if(in<0.0f){
out= (in/g)-c;
}
else{
out = (_powf(10.0f,in/a)-1.0f)/b;
}
out=out-c;
return out;
}
__DEVICE__ float lin_log3g10(float in)
{
float out;
float a =  0.224282f;
float b =  155.975327f;
float c =  0.01f;
float g =  15.1927f;
in = in + c;
if(in<0.0f){
out=in*g;
}
else{
out = a*_log10f((in*b)+1.0f);
}
return out;
}
// ARRI LOG-C4
__DEVICE__ float logc4_lin(float in)
{
float out;
float a = (_powf(2.0f, 18.0f) - 16.0f)*1/117.45f;
float b = (1023.0f - 95.0f)/1023.0f;
float c = 95.0f/1023.0f;
float s = 7.0f*_logf(2) * _powf(2, 7-14*c/b)/a*b;
float t = (_powf(2, 14.0f* -1.0f*(c/b)) - 64.0f)/a;
if(in>=0){
out = (_powf(2,(14.0f*(in-c)/b + 6.0f)) - 64.0f)/a;
}
else{
out = in * s + t;
}
return out;
}
__DEVICE__ float lin_logc4(float in)
{
float out;
float a = (_powf(2.0f, 18.0f) - 16.0f)*1/117.45f;
float b = (1023.0f - 95.0f)/1023.0f;
float c = 95.0f/1023.0f;
float s = 7.0f*_logf(2) * _powf(2, 7-14*c/b)/a*b;
float t = (_powf(2, 14.0f* -1.0f*(c/b)) - 64.0f)/a;
if(in>=t){
out = ((_log2f(a*in+64.0f)-6)/14)*b + c;
}
else{
out = (in-t)/s;
}
return out;
}
//ARRI LOG-C3
__DEVICE__ float logc_lin(float in)
{
float out;
float cut = 0.004201f;
float e = 5.367655f;
float f = 0.092809f;
float d = 0.385537f;
float c = 0.247190f;
float b = 0.052272f;
float a = 5.555556f;
out = (in > e * cut + f) ? (_powf(10, (in - d) / c) - b) / a: (in - f) / e;
return out;
}
__DEVICE__ float lin_logc(float in)
{
float out;
float cut = 0.010591f;
float e = 5.367655f;
float f = 0.092809f;
float d = 0.385537f;
float c = 0.247190f;
float b = 0.052272f;
float a = 5.555556f;
out = (in > cut) ? c * _log10f(a * in + b) + d: e * in + f;
return out;
}
//ACES
__DEVICE__ float cct_lin(float in)
{
float out;
float Y_BRK = 0.155251141552511f;
float A = 10.5402377416545f;
float B = 0.0729055341958355f;
if (in > Y_BRK){
out = _powf( 2.0f, in * 17.52f - 9.72f);
}
else{
out = (in - B) / A;
}
return out;
}
__DEVICE__ float lin_cct(float in)
{
float out;
float X_BRK = 0.0078125f;
float A = 10.5402377416545f;
float B = 0.0729055341958355f;
if (in <= X_BRK){
out = A * in + B;
}
else{
out = (_log2f(in) + 9.72f) / 17.52f;
}
return out;
}
//DaVinci WideGammut
__DEVICE__ float di_lin(float in)
{
float out;
float DI_LOG_CUT =0.02740668f;
float DI_C = 0.07329248f;
float DI_B = 7.0f;
float DI_A = 0.0075f;
float DI_M = 10.44426855f;
if(in <= DI_LOG_CUT){
out = in/DI_M;
}
else{
out = _powf(2.0f, (in / DI_C) - DI_B)- DI_A;
}
return out;
}
__DEVICE__ float lin_di(float in)
{
float out;
float DI_LIN_CUT = 0.00262409f;
float DI_C = 0.07329248f;
float DI_B = 7.0f;
float DI_A = 0.0075f;
float DI_M = 10.44426855f;
if(in <= DI_LIN_CUT){
out = in * DI_M;
}
else{
out = (_log2f(in + DI_A) + DI_B) * DI_C;
}
return out;
}
//FUNÇÕES PARA CONTRASTE
__DEVICE__ float apply_white(float in, float n)
{
float out;
if(in>=.18f)
{
float limit_white = .18f*_powf(2,n);
float a = (limit_white - .18f) / (_powf(2,n) - .18f);
float b =_powf(a,-1 * 1.0f) - 1;
float s = (_powf(2,n) - .18f) / _powf(b,1/1.0f);
float c = 1 + ((in - .18f) / s);
float d = _powf(c,1.0f);
out = .18f + s *((in - .18f) / s) / _powf(d,1/1.0f);
}
else{
out=in;
}
return out;
}
__DEVICE__ float apply_blackpoint(float in, float limit_black, float pivot)
{
float out;
if(in<0.0f){
in=0.0f;
}
if(in<pivot)
{
in = 1-in;
pivot= 1-pivot;
float a = (( -1.0*(limit_black - .999)  - pivot) / (1 - pivot));
float b =_powf(a,-1 * 1.0f) - 1;
float s = (1 - pivot) / _powf(b,1/1.0f);
float c = 1 + ((in - pivot) / s);
float d = _powf(c,1.0f);
out = pivot + s *((in - pivot) / s) / _powf(d,1/1.0f);
out = 1-out;
}
else{
out = in;
}
return out;
}
__DEVICE__ float apply_contrast(float in, float contrast, float pivot)
{
float out;
if(in<0.0f){
in=0.0f;
}
if(in<=pivot){
out = _powf((in/pivot), contrast) *pivot;
}
else{
in = 1-in;
pivot= 1-pivot;
out = _powf((in/pivot), contrast) *pivot;
out = 1-out;
}
return out;
}

DEFINE_UI_PARAMS(contrast, Contrast, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.1)
DEFINE_UI_PARAMS(trasferfunction, Transfer Function, DCTLUI_COMBO_BOX, 0, { dwg, aces, logc, logc4, red }, { DaVinci Intermediate, Aces cct, Log-C3, Log-C4,Log3G10})
DEFINE_UI_PARAMS(limit_white, White Point - Stops, DCTLUI_SLIDER_FLOAT, 12.0, 0.0, 12.0, 0.1)
DEFINE_UI_PARAMS(limit_black, Black Point, DCTLUI_SLIDER_FLOAT, 0.0, 0.0, 1.0, 0.1)
DEFINE_UI_PARAMS(contrast_R, Contrast Red, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.1)
DEFINE_UI_PARAMS(contrast_G, Contrast Green, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.1)
DEFINE_UI_PARAMS(contrast_B, Contrast Blue, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.1)
DEFINE_UI_PARAMS(r_weight, Red Weight, DCTLUI_SLIDER_FLOAT, .299, .0, 1, .001)
DEFINE_UI_PARAMS(g_weight, Green Weight, DCTLUI_SLIDER_FLOAT, .587, .0, 1, .001)
DEFINE_UI_PARAMS(b_weight, Blue Weight, DCTLUI_SLIDER_FLOAT, .114, .0, 1, .001)
DEFINE_UI_PARAMS(bypass, Bypass Adjustments, DCTLUI_CHECK_BOX, 0)




__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{

	float3 in = {p_R, p_G, p_B};
	float3 out;

//Log-C3
    if(trasferfunction == logc){
    float pivot = .391;
    {
    out.x = apply_contrast(in.x, contrast, pivot);
    out.y = apply_contrast(in.y, contrast, pivot);
    out.z = apply_contrast(in.z, contrast, pivot);
    }
    {
    out.x = logc_lin(out.x);
    out.y = logc_lin(out.y);
    out.z = logc_lin(out.z);
    }
    {
    out.x = apply_white(out.x, limit_white);
    out.y = apply_white(out.y, limit_white);
    out.z = apply_white(out.z, limit_white);
    }
    {
    out.x = lin_logc(out.x);
    out.y = lin_logc(out.y);
    out.z = lin_logc(out.z);
    }
    {
    out.x = apply_blackpoint(out.x, limit_black, pivot);
    out.y = apply_blackpoint(out.y, limit_black, pivot);
    out.z = apply_blackpoint(out.z, limit_black, pivot);
    }
	{
	out.x = apply_contrast(out.x, contrast_R, pivot);
	out.y = apply_contrast(out.y, contrast_G, pivot);
	out.z = apply_contrast(out.z, contrast_B, pivot);
	}
	}
//Log-C4
    if(trasferfunction == logc4){
    float pivot = .278;
    {
    out.x = apply_contrast(in.x, contrast, pivot);
    out.y = apply_contrast(in.y, contrast, pivot);
    out.z = apply_contrast(in.z, contrast, pivot);
    }
    {
    out.x = logc4_lin(out.x);
    out.y = logc4_lin(out.y);
    out.z = logc4_lin(out.z);
    }
    {
    out.x = apply_white(out.x, limit_white);
    out.y = apply_white(out.y, limit_white);
    out.z = apply_white(out.z, limit_white);
    }
    {
    out.x = lin_logc4(out.x);
    out.y = lin_logc4(out.y);
    out.z = lin_logc4(out.z);
    }
    {
    out.x = apply_blackpoint(out.x, limit_black, pivot);
    out.y = apply_blackpoint(out.y, limit_black, pivot);
    out.z = apply_blackpoint(out.z, limit_black, pivot);
    }
	{
	out.x = apply_contrast(out.x, contrast_R, pivot);
	out.y = apply_contrast(out.y, contrast_G, pivot);
	out.z = apply_contrast(out.z, contrast_B, pivot);
	}
	}
//ACES
    if(trasferfunction == aces){
    float pivot = .414;
    {
    out.x = apply_contrast(in.x, contrast, pivot);
    out.y = apply_contrast(in.y, contrast, pivot);
    out.z = apply_contrast(in.z, contrast, pivot);
    }
    {
    out.x = cct_lin(out.x);
    out.y = cct_lin(out.y);
    out.z = cct_lin(out.z);
    }
    {
    out.x = apply_white(out.x, limit_white);
    out.y = apply_white(out.y, limit_white);
    out.z = apply_white(out.z, limit_white);
    }
    {
    out.x = lin_cct(out.x);
    out.y = lin_cct(out.y);
    out.z = lin_cct(out.z);
    }
    {
    out.x = apply_blackpoint(out.x, limit_black, pivot);
    out.y = apply_blackpoint(out.y, limit_black, pivot);
    out.z = apply_blackpoint(out.z, limit_black, pivot);
    }
	{
	out.x = apply_contrast(out.x, contrast_R, pivot);
	out.y = apply_contrast(out.y, contrast_G, pivot);
	out.z = apply_contrast(out.z, contrast_B, pivot);
	}
	}
//DaVinci Intermediate
    if(trasferfunction == dwg){
    float pivot = .336;
    {
    out.x = apply_contrast(in.x, contrast, pivot);
    out.y = apply_contrast(in.y, contrast, pivot);
    out.z = apply_contrast(in.z, contrast, pivot);
    }
    {
    out.x = di_lin(out.x);
    out.y = di_lin(out.y);
    out.z = di_lin(out.z);
    }
    {
    out.x = apply_white(out.x, limit_white);
    out.y = apply_white(out.y, limit_white);
    out.z = apply_white(out.z, limit_white);
    }
    {
    out.x = lin_di(out.x);
    out.y = lin_di(out.y);
    out.z = lin_di(out.z);
    }
    {
    out.x = apply_blackpoint(out.x, limit_black, pivot);
    out.y = apply_blackpoint(out.y, limit_black, pivot);
    out.z = apply_blackpoint(out.z, limit_black, pivot);
    }
	{
	out.x = apply_contrast(out.x, contrast_R, pivot);
	out.y = apply_contrast(out.y, contrast_G, pivot);
	out.z = apply_contrast(out.z, contrast_B, pivot);
	}
	}
//Log3G10
    if(trasferfunction == red){
    float pivot = .333;
    {
    out.x = apply_contrast(in.x, contrast, pivot);
    out.y = apply_contrast(in.y, contrast, pivot);
    out.z = apply_contrast(in.z, contrast, pivot);
    }
    {
    out.x = log3g10_lin(out.x);
    out.y = log3g10_lin(out.y);
    out.z = log3g10_lin(out.z);
    }
    {
    out.x = apply_white(out.x, limit_white);
    out.y = apply_white(out.y, limit_white);
    out.z = apply_white(out.z, limit_white);
    }
    {
    out.x = lin_log3g10(out.x);
    out.y = lin_log3g10(out.y);
    out.z = lin_log3g10(out.z);
    }
    {
    out.x = apply_blackpoint(out.x, limit_black, pivot);
    out.y = apply_blackpoint(out.y, limit_black, pivot);
    out.z = apply_blackpoint(out.z, limit_black, pivot);
    }
	{
	out.x = apply_contrast(out.x, contrast_R, pivot);
	out.y = apply_contrast(out.y, contrast_G, pivot);
	out.z = apply_contrast(out.z, contrast_B, pivot);
	}
	}
	float get_luma = _sqrtf(r_weight*_powf(out.x,2) + g_weight*_powf(out.y,2)+b_weight*_powf(out.z,2));
	{
    out.x = ((out.x-get_luma)*.0f)+get_luma;
    out.y = ((out.y-get_luma)*.0f)+get_luma;
    out.z = ((out.z-get_luma)*.0f)+get_luma;
    }
    if( bypass == 1){
    float get_luma = _sqrtf(.299f*_powf(in.x,2) + .587f*_powf(in.y,2)+.114*_powf(in.z,2));
    {
    out.x = ((in.x-get_luma)*.0f)+get_luma;
    out.y = ((in.y-get_luma)*.0f)+get_luma;
    out.z = ((in.z-get_luma)*.0f)+get_luma;
    }
    }
	return out;
}
