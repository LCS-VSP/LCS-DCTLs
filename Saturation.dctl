__CONSTANT__ float pie = 3.14159265358979323f;

__DEVICE__ float3 rgb_ych(float3 in)

{

float y = in.x * .333f + in.y * .333f + in.z * .333f;

float a = in.x * .5f - in.y * .25f - in.z * .25f;

float b = in.x * 0.0f + in.y * .433f - in.z * .433f;

float c = _hypotf(a, b);

float h = (180/pie) * _atan2f(b, a);
if (h < 0.0f) h += 360.0f;

return make_float3(y, c, h);

}

__DEVICE__ float3 apply_density(float3 in, float density)
{
float3 out = in;

if(in.x > 1.0){
in.x = 1.0;
}
if(in.x <= 0.0){
in.x = 0.001;
}
if(in.y>1.0){
in.y = 1.0;
}
if(in.y <= 0.0){
in.y = 0.001;
}
if(in.z>1.0){
in.z = 1.0;
}
if(in.z<0.0){
in.z = 0.001;
}

float g = (0 * _powf(1 - in.y,3) + 3 * .333f * _powf(1 - in.y,2) * in.y + 3 * (density - .333) * (1 - in.y) * _powf(in.y,2) + density * _powf(in.y,3)) * 1;

out.x = (in.x * g/in.y);

return out;

}
__DEVICE__ float3 apply_gamma(float3 in, float gamma)

{
float3 out = in;

out.y = _powf(in.y,1/gamma);

return out;
}

__DEVICE__ float3 apply_sat(float3 in, float limit_out)

{

float3 out = in;


float a = _powf(limit_out, -1 * 1) - 1;

float s = 1/ _powf(a,1/1);

float b = 1 + (in.y / s);

float c = _powf(b,1);

out.y = s * (in.y / s) / _powf(c,1/1);


return out;
}

__DEVICE__ float3 ych_rgb(float3 in)

{
float a = in.y * _cosf(in.z * (pie / 180.0f));
float b = in.y * _sinf(in.z * (pie / 180.0f));

float r = in.x + a * 1.333f + b * 0.0;

float g = in.x - a * .666f + b * 1.154f;

float e = in.x - a * .666f - b * 1.154f;

return make_float3(r, g, e);
}

DEFINE_UI_PARAMS(gamma, Boost, DCTLUI_SLIDER_FLOAT, 1.0, 0.0, 2.0, 0.001)
DEFINE_UI_PARAMS(limit_out, Limit, DCTLUI_SLIDER_FLOAT, .999, 0.001, .999, 0.001)
DEFINE_UI_PARAMS(density, Color Density, DCTLUI_SLIDER_FLOAT, 1.0, .333, 1.0, 0.001)
DEFINE_UI_PARAMS(opt_showcurve, Show Sat vs Sat Curve, DCTLUI_CHECK_BOX, 0)

__DEVICE__ float3 transform (int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    float3 in = {p_R, p_G, p_B};

    float width = (float)p_Width;
    float height = (float)p_Height;
    float X = (float)p_X;
    float Y = height - (float)p_Y;
    float3 ramp = {X / width, X / width, X / width};

    float3 out;
    
    {
    out = rgb_ych(in);
    }

    {
    out = apply_density(out, density);
    }

    {
    out = apply_gamma(out, gamma);
    ramp = apply_gamma(ramp, gamma);
    }
    
    {
    out = apply_sat(out, limit_out);
    ramp = apply_sat(ramp, limit_out);
    }
    
    {
    out = ych_rgb(out);
    }

    
    if (opt_showcurve == 1)

    {

    float overlayR = ramp.x >= (Y - 5.0f) / height && ramp.x <= (Y + 5.0f) / height ? 1.0f : 0.0f;
    float overlayG = ramp.y >= (Y - 1.0f) / height && ramp.y <= (Y + 1.0f) / height ? 1.0f : 0.0f;
    float overlayB = ramp.z >= (Y - 1.0f) / height && ramp.z <= (Y + 1.0f) / height ? 1.0f : 0.0f;


    out.y = overlayG == 0.0f ? out.y : overlayG;
    out.z = overlayB == 0.0f ? out.z : overlayB;
 

    }
    return out;
}

