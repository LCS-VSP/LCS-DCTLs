// Log3G10
__DEVICE__ float log3g10_lin(float in)
{
float out;
float a =  0.224282f;
float b =  155.975327f;
float c =  0.01f;
float g =  15.1927f;

if(in<0.0f){
out= (in/g)-c;
}
else{
out = (_powf(10.0f,in/a)-1.0f)/b;
}
out=out-c;
return out;
}

__DEVICE__ float lin_log3g10(float in)
{
float out;
float a =  0.224282f;
float b =  155.975327f;
float c =  0.01f;
float g =  15.1927f;
in = in + c;
if(in<0.0f){
out=in*g;
}
else{
out = a*_log10f((in*b)+1.0f);
}
return out;
}

// ARRI LOG-C4
__DEVICE__ float logc4_lin(float in)
{
float out;

float a = (_powf(2.0f, 18.0f) - 16.0f)*1/117.45f;
float b = (1023.0f - 95.0f)/1023.0f;
float c = 95.0f/1023.0f;
float s = 7.0f*_logf(2) * _powf(2, 7-14*c/b)/a*b;
float t = (_powf(2, 14.0f* -1.0f*(c/b)) - 64.0f)/a;

if(in>=0){
out = (_powf(2,(14.0f*(in-c)/b + 6.0f)) - 64.0f)/a;
}
else{
out = in * s + t;
}
return out;
}

__DEVICE__ float lin_logc4(float in)
{
float out;

float a = (_powf(2.0f, 18.0f) - 16.0f)*1/117.45f;
float b = (1023.0f - 95.0f)/1023.0f;
float c = 95.0f/1023.0f;
float s = 7.0f*_logf(2) * _powf(2, 7-14*c/b)/a*b;
float t = (_powf(2, 14.0f* -1.0f*(c/b)) - 64.0f)/a;

if(in>=t){
out = ((_log2f(a*in+64.0f)-6)/14)*b + c;
}
else{
out = (in-t)/s;
}
return out;
}

//ARRI LOG-C3
__DEVICE__ float logc_lin(float in)
{
float out;

float cut = 0.004201f;
float e = 5.367655f;
float f = 0.092809f;
float d = 0.385537f;
float c = 0.247190f;
float b = 0.052272f;
float a = 5.555556f;

out = (in > e * cut + f) ? (_powf(10, (in - d) / c) - b) / a: (in - f) / e;

return out;
}

__DEVICE__ float lin_logc(float in)
{
float out;

float cut = 0.010591f;
float e = 5.367655f;
float f = 0.092809f;
float d = 0.385537f;
float c = 0.247190f;
float b = 0.052272f;
float a = 5.555556f;

out = (in > cut) ? c * _log10f(a * in + b) + d: e * in + f;

return out;
}

//ACES
__DEVICE__ float cct_lin(float in)
{
float out;

float Y_BRK = 0.155251141552511f;
float A = 10.5402377416545f;
float B = 0.0729055341958355f;

if (in > Y_BRK){
out = _powf( 2.0f, in * 17.52f - 9.72f);
}
else{
out = (in - B) / A;
}
return out;
}

__DEVICE__ float lin_cct(float in)
{
float out;

float X_BRK = 0.0078125f;
float A = 10.5402377416545f;
float B = 0.0729055341958355f;

if (in <= X_BRK){
out = A * in + B;
}
else{
out = (_log2f(in) + 9.72f) / 17.52f;
}
return out;
}

//DaVinci WideGammut
__DEVICE__ float di_lin(float in)
{
float out;

float DI_LOG_CUT =0.02740668f;
float DI_C = 0.07329248f;
float DI_B = 7.0f;
float DI_A = 0.0075f;
float DI_M = 10.44426855f;

if(in <= DI_LOG_CUT){
out = in/DI_M;
}
else{
out = _powf(2.0f, (in / DI_C) - DI_B)- DI_A;
}


return out;
}

__DEVICE__ float lin_di(float in)

{
float out;

float DI_LIN_CUT = 0.00262409f;
float DI_C = 0.07329248f;
float DI_B = 7.0f;
float DI_A = 0.0075f;
float DI_M = 10.44426855f;

if(in <= DI_LIN_CUT){
out = in * DI_M;
}
else{
out = (_log2f(in + DI_A) + DI_B) * DI_C;
}

return out;
}

DEFINE_UI_PARAMS(exposure, Exposure, DCTLUI_SLIDER_FLOAT, 0.0, -5.0, 5.0, 0.1)
DEFINE_UI_PARAMS(colorspace, Transfer Function, DCTLUI_COMBO_BOX, 0, { dwg, aces, logc, logc4,red}, { DaVinci Intermediate, Aces cct, Log-C3, Log-C4, Log3G10})


__DEVICE__ float3 transform(int p_Width, int p_Height, int p_X, int p_Y, float p_R, float p_G, float p_B)
{
    
    float3 in = {p_R, p_G, p_B};
    float3 out;



//LogC3
    if(colorspace == logc)
    {    
        {
        out.x = logc_lin(in.x);
        out.y = logc_lin(in.y);
        out.z = logc_lin(in.z);   
        }
        {
        out.x = out.x * _powf(2,exposure);
        out.y = out.y * _powf(2,exposure);
        out.z = out.z * _powf(2,exposure);
        }
        {
        out.x = lin_logc(out.x); 
        out.y = lin_logc(out.y);
        out.z = lin_logc(out.z);
        }
    }

//Aces cct
    if(colorspace == aces)
    {   
        {
        out.x = cct_lin(in.x);
        out.y = cct_lin(in.y);
        out.z = cct_lin(in.z);   
        }
        {
        out.x = out.x * _powf(2,exposure);
        out.y = out.y * _powf(2,exposure);
        out.z = out.z * _powf(2,exposure);
        }
        {
        out.x = lin_cct(out.x); 
        out.y = lin_cct(out.y);
        out.z = lin_cct(out.z);
        }
    }

//DaVinciWideGammut

    if(colorspace == dwg)
    {
        {
        out.x = di_lin(in.x);
        out.y = di_lin(in.y);
        out.z = di_lin(in.z);   
        }
        {
        out.x = out.x * _powf(2,exposure);
        out.y = out.y * _powf(2,exposure);
        out.z = out.z * _powf(2,exposure);
        }
        {
        out.x = lin_di(out.x); 
        out.y = lin_di(out.y);
        out.z = lin_di(out.z);
        }
    }
//LogC4
    
    if(colorspace == logc4)
    {    
        {
        out.x = logc4_lin(in.x);
        out.y = logc4_lin(in.y);
        out.z = logc4_lin(in.z);   
        }
        {
        out.x = out.x * _powf(2,exposure);
        out.y = out.y * _powf(2,exposure);
        out.z = out.z * _powf(2,exposure);
        }
        {
        out.x = lin_logc4(out.x); 
        out.y = lin_logc4(out.y);
        out.z = lin_logc4(out.z);
        }
    }
//Log3G10
    
    if(colorspace == red)
    {    
        {
        out.x = log3g10_lin(in.x);
        out.y = log3g10_lin(in.y);
        out.z = log3g10_lin(in.z);   
        }
        {
        out.x = out.x * _powf(2,exposure);
        out.y = out.y * _powf(2,exposure);
        out.z = out.z * _powf(2,exposure);
        }
        {
        out.x = lin_log3g10(out.x); 
        out.y = lin_log3g10(out.y);
        out.z = lin_log3g10(out.z);
        }
    }

    return out;
}